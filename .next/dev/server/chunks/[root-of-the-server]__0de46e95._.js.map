{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Syed%20Arham%20Abdullah/Desktop/orbyte-clone-updated/pages/api/gemini.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method not allowed\" });\r\n  }\r\n\r\n  // Debug log to confirm the route is running\r\n  console.log(\"‚úÖ /api/gemini route hit\");\r\n\r\n  try {\r\n    const { query, systemInstruction } = req.body;\r\n\r\n    if (!query) {\r\n      console.log(\"‚ùå No query provided\");\r\n      return res.status(400).json({ error: \"Missing query text\" });\r\n    }\r\n\r\n    // Ensure your Gemini API key is loaded correctly\r\n    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;\r\n    if (!GEMINI_API_KEY) {\r\n      console.error(\"‚ùå GEMINI_API_KEY is not defined in .env.local\");\r\n      return res.status(500).json({ error: \"Server missing Gemini API key\" });\r\n    }\r\n\r\n    // Make the API call to Gemini\r\n    const response = await fetch(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${GEMINI_API_KEY}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          contents: [{ parts: [{ text: query }] }],\r\n          tools: [{ google_search: {} }],\r\n          systemInstruction: { parts: [{ text: systemInstruction }] },\r\n        }),\r\n      }\r\n    );\r\n\r\n    const data = await response.json();\r\n    console.log(\"‚úÖ Gemini API response:\", JSON.stringify(data, null, 2));\r\n\r\n    return res.status(200).json(data);\r\n  } catch (error: any) {\r\n    console.error(\"üî• Gemini API error:\", error.message || error);\r\n    return res.status(500).json({ error: error.message || \"Internal Server Error\" });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAEe,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC7E,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;IAEA,4CAA4C;IAC5C,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,IAAI,IAAI;QAE7C,IAAI,CAAC,OAAO;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAqB;QAC5D;QAEA,iDAAiD;QACjD,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;QACjD,IAAI,CAAC,gBAAgB;YACnB,QAAQ,KAAK,CAAC;YACd,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAgC;QACvE;QAEA,8BAA8B;QAC9B,MAAM,WAAW,MAAM,MACrB,CAAC,6GAA6G,EAAE,gBAAgB,EAChI;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBACnB,UAAU;oBAAC;wBAAE,OAAO;4BAAC;gCAAE,MAAM;4BAAM;yBAAE;oBAAC;iBAAE;gBACxC,OAAO;oBAAC;wBAAE,eAAe,CAAC;oBAAE;iBAAE;gBAC9B,mBAAmB;oBAAE,OAAO;wBAAC;4BAAE,MAAM;wBAAkB;qBAAE;gBAAC;YAC5D;QACF;QAGF,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,0BAA0B,KAAK,SAAS,CAAC,MAAM,MAAM;QAEjE,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IAC9B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,wBAAwB,MAAM,OAAO,IAAI;QACvD,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO,IAAI;QAAwB;IAChF;AACF","debugId":null}}]
}