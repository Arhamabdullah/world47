{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Syed%20Arham%20Abdullah/Desktop/orbyte-clone-updated/pages/api/gemini.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\r\nconst GEMINI_API_URL =\r\n  \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n  if (req.method !== \"POST\")\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n\r\n  if (!GEMINI_API_KEY)\r\n    return res.status(500).json({ error: \"Missing GEMINI_API_KEY in env\" });\r\n\r\n  try {\r\n    const { query, systemInstruction } = req.body;\r\n    if (!query) return res.status(400).json({ error: \"Missing query\" });\r\n\r\n    const payload = {\r\n      contents: [\r\n        {\r\n          role: \"user\",\r\n          parts: [{ text: query }],\r\n        },\r\n      ],\r\n      system_instruction: {\r\n        role: \"system\",\r\n        parts: [{ text: systemInstruction || \"\" }],\r\n      },\r\n    };\r\n\r\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    const raw = await response.text();\r\n    if (!response.ok) {\r\n      console.error(\"Gemini API Error:\", raw);\r\n      return res.status(response.status).json({ error: raw });\r\n    }\r\n\r\n    let data: any = {};\r\n    try {\r\n      data = JSON.parse(raw);\r\n    } catch {\r\n      console.warn(\"⚠️ Gemini returned non-JSON response:\", raw);\r\n    }\r\n\r\n    // ✅ Parse out text or image\r\n    const candidate = data?.candidates?.[0];\r\n    const part = candidate?.content?.parts?.[0];\r\n\r\n    if (part?.inlineData?.data) {\r\n      // Image in base64\r\n      const imageUrl = `data:image/png;base64,${part.inlineData.data}`;\r\n      return res.status(200).json({ type: \"image\", imageUrl });\r\n    }\r\n\r\n    const text = part?.text || candidate?.content?.parts?.map((p: any) => p.text).join(\" \") || \"No response generated.\";\r\n    return res.status(200).json({ type: \"text\", text });\r\n  } catch (err: any) {\r\n    console.error(\"❌ Gemini Handler Error:\", err);\r\n    return res.status(500).json({ error: err.message || \"Internal Server Error\" });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAEA,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AACjD,MAAM,iBACJ;AAEa,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC7E,IAAI,IAAI,MAAM,KAAK,QACjB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,OAAO;IAAqB;IAE5D,IAAI,CAAC,gBACH,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,OAAO;IAAgC;IAEvE,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,IAAI,IAAI;QAC7C,IAAI,CAAC,OAAO,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAgB;QAEjE,MAAM,UAAU;YACd,UAAU;gBACR;oBACE,MAAM;oBACN,OAAO;wBAAC;4BAAE,MAAM;wBAAM;qBAAE;gBAC1B;aACD;YACD,oBAAoB;gBAClB,MAAM;gBACN,OAAO;oBAAC;wBAAE,MAAM,qBAAqB;oBAAG;iBAAE;YAC5C;QACF;QAEA,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,KAAK,EAAE,gBAAgB,EAAE;YACtE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,MAAM,MAAM,MAAM,SAAS,IAAI;QAC/B,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,IAAI,MAAM,CAAC,SAAS,MAAM,EAAE,IAAI,CAAC;gBAAE,OAAO;YAAI;QACvD;QAEA,IAAI,OAAY,CAAC;QACjB,IAAI;YACF,OAAO,KAAK,KAAK,CAAC;QACpB,EAAE,OAAM;YACN,QAAQ,IAAI,CAAC,yCAAyC;QACxD;QAEA,4BAA4B;QAC5B,MAAM,YAAY,MAAM,YAAY,CAAC,EAAE;QACvC,MAAM,OAAO,WAAW,SAAS,OAAO,CAAC,EAAE;QAE3C,IAAI,MAAM,YAAY,MAAM;YAC1B,kBAAkB;YAClB,MAAM,WAAW,CAAC,sBAAsB,EAAE,KAAK,UAAU,CAAC,IAAI,EAAE;YAChE,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,MAAM;gBAAS;YAAS;QACxD;QAEA,MAAM,OAAO,MAAM,QAAQ,WAAW,SAAS,OAAO,IAAI,CAAC,IAAW,EAAE,IAAI,EAAE,KAAK,QAAQ;QAC3F,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,MAAM;YAAQ;QAAK;IACnD,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO,IAAI,OAAO,IAAI;QAAwB;IAC9E;AACF","debugId":null}}]
}